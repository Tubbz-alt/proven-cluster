


        {
                "hasProvenance": {
                        "@type": "provenTest:TestMessage",
                        "hasApplicationName": "Test Application",
                        "hasDescription": " Test message...",
                        "@id": "provenTest:1_TestMessage"
                },
                "keywords": [],
                "@type": "proven:ProvenanceMessage",
                "name": "TestProvEnMessage",
                "description": "Testing messages...",
                "hasProvenanceMetric": [],
                "@id": "proven:1_ProvenanceMessage",
                "@context": {
                        "hasApplicationName": {
                                "@type": "xsd:string",
                                "@id": "wfpp:hasApplicationName"
                        },
                        "hasDescription": {
                                "@type": "xsd:string",
                                "@id": "wfpp:hasDescription"
                        },
                        "hasProvenance": {
                                "@type": "@id",
                                "@id": "proven:hasProvenance"
                        },
                        "proven": "http://provenance.pnnl.gov/ns/proven#",
                        "provenTest": "http://provenance.pnnl.gov/ns/provenTest#",
                        "wfpp": "http://wfpp.pnnl.gov#"
                }
        }



SELECT (COUNT(?s) AS ?triples) WHERE {
    ?s ?p ?o
}


SELECT DISTINCT ?g 
WHERE {
  GRAPH ?g { ?s ?p ?o }
}


===============================================



# Obtain the label of a given class (:class1).
SELECT DISTINCT ?c (STR(?l) AS ?lb)
    WHERE {
      ?c a :class1 ;
        <http://www.w3.org/2000/01/rdf-schema#label> ?l .
    }

# Obtain a list of classes.
SELECT DISTINCT ?c
    WHERE {
      GRAPH :graph
        {[] a ?c .}
    }

# Count instances belonging to a given class (:class1).
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph
        {?s a :class1 .}
    }

# Enumerate classes linked from a given class (:class1) and predicates that link instances of the given class and the target classes.
# below q1 to q3 are indentical to each other (I think)
### q1
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 .
  ?t a ?c .
  ?f ?p ?t .
  FILTER(?c != owl:Class)
} GROUP BY ?p ?c
### q2
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 ;
     ?p [ a ?c ].
FILTER(!sameTerm(?c, owl:Class))
} GROUP BY ?p ?c
### q3
SELECT ?p ?c (COUNT(?p) AS ?pc) {
  ?f a :class1 ;
     ?p ?t ;
     !rdf:type ?t .
  ?t a ?c .
} GROUP BY ?p ?c

# Enumerate all the predicates with their counts under the condition that their subject and object belong to :c1 and :c2, respectively.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        ?o a :c2 .
      }}
  GROUP BY ?p

# Count triples whose subject and object belong to :c1 and a locally-undeclared class, respectively.
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        MINUS {?o a ?oc}
	  FILTER(!isLiteral(?o) && ?p != rdf:type)
      }}

# Enumerate all the predicates with their counts under the condition that their subject and object belong to :c1 and a locally-undeclared class, respectively.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        MINUS {?o a ?oc}
        FILTER(!isLiteral(?o) && ?p != rdf:type)
      }}
  GROUP BY ?p

# Count triples whose subject belongs to :c1 and whose object is literal.
SELECT (COUNT(?s) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        FILTER(isLiteral(?o))
      }}

# Enumerate all the predicates with their counts under the condition that their subject belongs to :c1 and their object is literal.
SELECT ?p (COUNT(?p) AS ?rc)
    WHERE {
      GRAPH :graph {
        ?s ?p ?o .
        ?s a :c1 .
        FILTER(isLiteral(?o))
      }}
GROUP BY ?p






SELECT ?subject ?predicate ?object
 WHERE {
          <http://provenance.pnnl.gov/ns/proven#0321e5ca-f314-41d1-b141-22cb92dabafc_Representation> ?predicate ?object .
}


http://provenance.pnnl.gov/ns/proven#FoundationModel

http://provenance.pnnl.gov/ns/proven#DomainModel



SELECT ?subject ?predicate ?object
 WHERE {
          ?subject ?predicate <http://provenance.pnnl.gov/ns/proven#DomainModel> .
          ?subject ?predicate ?object .
}


"BFO 2 Reference: BFO rests on the presupposition that at multiple micro-, meso- and macroscopic scales reality exhibits certain stable, spatially separated or separable material units, combined or combinable into aggregates of various sorts (for example organisms into what are called ‘populations’). Such units play a central role in almost all domains of natural science from particle physics to cosmology. Many scientific laws govern the units in question, employing general terms (such as ‘molecule’ or ‘planet’) referring to the types and subtypes of units, and also to the types and subtypes of the processes through which such units develop and interact. The division of reality into such natural units is at the heart of biological science, as also is the fact that these units may form higher-level units (as cells form multicellular organisms) and that they may also form aggregates of units, for example as cells form portions of tissue and organs form families, herds, breeds, species, and so on. At the same time, the division of certain portions of reality into engineered units (manufactured artifacts) is the basis of modern industrial technology, which rests on the distributed mass production of engineered parts through division of labor and on their assembly into larger, compound units such as cars and laptops. The division of portions of reality into units is one starting point for the phenomenon of counting."













