
allprojects {
	task gradleVersion { doLast { println "Gradle version $gradle.gradleVersion"
		} }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

subprojects {

	ext.javaEEVersion = "8.0"
	ext.jetVersion = "3.0"
	ext.jetHazelcastVersion = "3.12"
	ext.payaraVersion = "5.192"
	ext.payaraHazelcastVersion = "3.12"
	ext.payaraJerseyVersion = "2.28"
	ext.influxDbLibVersion = "2.8"
	ext.swaggerVersion = "2.0.8"
	ext.jaxbApiVersion = "2.3.1"
	ext.eclipseMoxyVersion = "2.7.4"
	ext.moduleProjectSuffix = "-module"
	ext.jsonbApiVersion = "1.0"
	ext.jsonbYassonApiVersion = "1.0.4"
	ext.moduleLibProject = 'module-lib'
	ext.isModuleProject = ((project.name.endsWith("${moduleProjectSuffix}")) || (project.name == "${moduleLibProject}"))

    apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'java'
	apply plugin: 'eclipse'
 
 
    shadowJar {
	   mergeServiceFiles()
    }
 
	if (isModuleProject) {
		apply plugin: 'war'
		apply plugin: 'eclipse-wtp'
		
		war {
			webXml = null
		}
	}
	
	
	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
		mavenLocal()
		maven { url 'https://jitpack.io' }
		jcenter()
	}
	
	jar {
		onlyIf { !sourceSets.main.allSource.files.isEmpty() }
	}

	dependencies {

		// All subprojects
		testCompile 'junit:junit:4.8.2'
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
		compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
		compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
		
		//compileOnly group: 'javax.xml.bind', name: 'jaxb-api', version: "${jaxbApiVersion}"
		//compileOnly group:'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy', version: "${eclipseMoxyVersion}"
		//compileOnly group: 'javax.json.bind', name: 'javax.json.bind-api', version: "${jsonbApiVersion}"
		//compileOnly group: 'org.eclipse', name: 'yasson', version: "${jsonbYassonApiVersion}"
		

		// Module subprojects (assumes WAR plugin for dependencies)
		if (isModuleProject) {
			providedCompile group: 'javax', name: 'javaee-web-api', version: "${javaEEVersion}"
			providedCompile group: 'javax', name: 'javaee-api', version: "${javaEEVersion}"
			providedCompile group: 'fish.payara.api', name: 'payara-api', version: "${payaraVersion}"
			providedCompile group: 'com.hazelcast', name: 'hazelcast', version: "${payaraHazelcastVersion}"
			providedCompile group: 'fish.payara.extras', name: 'payara-micro', version: "${payaraVersion}"
			compile (group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version: "${swaggerVersion}")
			compile (group: 'io.swagger.core.v3', name: 'swagger-jaxrs2-servlet-initializer', version: "${swaggerVersion}")
			compile group: 'com.hazelcast', name: 'hazelcast-client', version: "${payaraHazelcastVersion}"
			compile (group: 'com.hazelcast.jet', name: 'hazelcast-jet-core', version: "${jetVersion}")
			// Do not include IMDG from Jet.  Versions for IMDG and Client must match.
			// Which in this case, is the Payara IMDG version
			{ exclude group: 'com.hazelcast' }
		}
	}
}

//
// Project Dependencies
//

// Contains libraries are used by the the Hazelcast member.
// This is simple a library container project, and other Proven
// projects should not depend on this library directly.
// TODO - Remove this library.  Use the contained libraries directly as 
//        part of application server deployment. 
project('proven-member:member-lib') {
	dependencies {
		compile project(':proven-member:hybrid-lib')
		compile project(':proven-member:module-lib')
	}
}

project('proven-member:disclosure-lib') {
	// No dependencies
}

project('proven-member:stream-lib') {
	// No dependencies
}

project('proven-member:module-lib') {
	dependencies {
		compile project(':proven-member:disclosure-lib')
		compile project(':proven-member:stream-lib')
		compile project(':proven-member:pipeline-lib') }
}

project('proven-member:hybrid-lib') {
	dependencies {  compile project(':proven-member:disclosure-lib') }
}

project('proven-member:pipeline-lib') {
	dependencies {  compile project(':proven-member:disclosure-lib') }
}

project('proven-member:disclosure-module') {
	dependencies { 
		compile project(':proven-member:module-lib')	
	}
}

project('proven-member:stream-module') {
	dependencies { 
		compile project(':proven-member:module-lib') 
	}
}

project('proven-member:hybrid-module') {
	dependencies {
		compile project(':proven-member:hybrid-lib')
		compile project(':proven-member:pipeline-lib')
		compile project(':proven-member:module-lib')
	}
}

project('proven-member:member-module') {
	dependencies { compile project(':proven-member:module-lib') }
}

project('proven-client') {
	dependencies {
		compile project(':proven-member:disclosure-lib')
	}
}
